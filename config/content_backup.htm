<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fqpabi8</p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323236">https://github.com/mdecp2024/hw-41323236</a></p>
<p>個人網站: <a href="https://mdecp2024.github.io/hw-41323236">https://mdecp2024.github.io/hw-41323236</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/f7gKNQTzN78?si=RVO33hOQKQ-_poZo" title="YouTube video player" width="560"></iframe></p><h3>w6</h3>
<p>操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p><img alt="" height="450" src="/images/螢幕擷取畫面 2024-11-06 103154.png" width="800"/></p><h3>w10</h3>
<p><span>題目一</span><span>: 請利用</span><a href="https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">程式一</a><span>的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行, 所完成的操作影片, 請以"國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 學號" 作為標題, 並在影片說明欄位中簡述此一影片的操作概要與心得, 完成後請將影片上傳至個人 Youtube 帳號下, 並嵌入個人網站中的 "w10" 頁面中</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/9I67tfE0ns4?si=_yefvV_nWglV-FFa" title="YouTube video player" width="560"></iframe></p>
<p><span>題目二:請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"(<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a>)有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應. 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目二"標示</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/exdLOxqglMM?si=xE-fJqs91S1QL_VY" title="YouTube video player" width="560"></iframe><span><br/></span></p>
<p><span>題目三</span>:<span> </span><a href="http://mde.tw/cp2024/content/Problem_set.html">http://mde.tw/cp2024/content/Problem_set.html</a><span> </span>中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行後, 在影片說明欄位及個人 w10 頁面中說明解題流程與心得, 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目三"標示.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rrnxf3x_GJo?si=3vsH_vyfuTn3fTb6" title="YouTube video player" width="560"></iframe></p><h3>w11_hw</h3>
<p>以下影片說明如何利用近端可攜系統維護個人作業網站:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hAe4qMGC1hE?si=h8t7hbJitHkgVQ-M" title="YouTube video player" width="560"></iframe></p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p>參考資料:</p>
<p><a href="https://mde.tw/cp2024/downloads/1a_w11_note.txt">1a_w11_note.txt</a></p>
<p>   </p>
<p>我的作業:</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oK5mrHdX0e8?si=AaeWeChZhwI7zt7U" title="YouTube video player" width="560"></iframe></p>
<p>米字號圓:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import math

def print_circle(radius, size):
    # 圓心座標 (中心點)
    center = size // 2
    for y in range(size):
        for x in range(size):
            # 計算每個點與圓心的距離
            distance = math.sqrt((x - center) ** 2 + (y - center) ** 2)
            # 如果距離小於等於半徑，印出 "*"，否則印出空格
            if distance &lt;= radius:
                print("*", end="")
            else:
                print(" ", end="")
        print()  # 換行

# 在 10x10 的區域中繪製半徑為 4 的圓形
print_circle(radius=4, size=10)</pre>
<p>黑色實心圓:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document as doc

# 創建畫布
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 獲取畫布的 2D 繪圖上下文
ctx = canvas.getContext("2d")

# 每格的像素數
gs = 20  # 每格的邊長

# 繪製網格
def grid(width, height, grid_pix):
    """畫出網格"""
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

# 繪製矩形邊框
def dRect(lux, luy, w, h, s=1, c="#ff0000"):
    """繪製矩形的邊框"""
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

# 填滿顏色
def fill(x, y, color):
    """填滿某個格子"""
    ctx.fillStyle = color
    ctx.fillRect(x, y, gs, gs)

# 繪製圓形
def draw_circle(grid_width, grid_height, radius, grid_pix):
    """在格子中繪製圓形"""
    center_x, center_y = grid_width // 2, grid_height // 2  # 圓心的格子座標
    for i in range(grid_width):
        for j in range(grid_height):
            # 計算該格子中心與圓心的距離
            cell_center_x = i + 0.5
            cell_center_y = j + 0.5
            distance = ((cell_center_x - center_x) ** 2 + (cell_center_y - center_y) ** 2) ** 0.5
            if distance &lt;= radius:
                fill(i * grid_pix, j * grid_pix, "black")  # 填充圓形內的格子

# 主程式
grid(10, 10, gs)  # 畫 10x10 的網格
draw_circle(10, 10, 4, gs)  # 在網格中繪製半徑為 4 的圓形</pre>
<p><br/><br/>   </p>
<p>我的心得:</p>
<p>這次的作業,讓我知道可以利用<span>Brython來做出簡易的圖形跟符號,並且利用chatgpt將程式碼設計出來,再將程式碼存入個人 Gist,就有自己所設計出來的圖形程式碼,在解題的過程中,可能出來的圖形都不符合我想要的圖案,這時就要檢查chatgpt的問法有無錯誤,做出及時的更正</span></p><h3>w12_hw</h3>
<p><br/>請各組組員分別利用<span> </span><span>Brython 以及 Jupyter lab</span><span> </span>環境, 執行<a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> </span>notebook 目錄中的<span> </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> </span>筆記本程式, 完成後請將<span style="background-color: #ffff00;">能在</span> Brython 執行的程式碼存入個人<span> </span><span>Gist</span><span> </span>後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得<span>。</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323236/content/Brython.html?src=https://gist.githubusercontent.com/41323236/be2999cad57024ea7c322a752cc3c384/raw/7cf3bcd8b5567e65fb8a66e8a6c232b727efd1fc/w12%25E7%259A%2584%25E4%25BD%259C%25E6%25A5%25AD"><span>Brython:</span>執行程式連結</a></p>
<p><a href="http://localhost:8888/lab/tree/RTC%3AUntitled12.ipynb"><span>Jupyter lab</span><span> </span>執行連結</a></p>
<p><span>程式語法:Python 語法</span></p>
<p><span>執行心得:</span>目前試下來只有09的程式碼,能夠執行<span>Brython 以及 Jupyter lab</span><span> </span><span>環境,透過ChatGPT了解此程式碼結構明確，利用清單和迴圈來處理多個動物，透過條件判斷，<span style="background-color: #ffff00;">將想看的動物特別標示出來，符合預期功能。</span></span></p>
<p><span><span style="background-color: #ffff00;"><img alt="" height="254" src="/images/螢幕擷取畫面 2024-12-02 201617.png" width="448"/></span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">I saw a giraffe
I saw a penguin and I really wanted to see it!
I saw a dolphin
</pre>
<p></p>
<p></p><h3>w13_hw</h3>
<p>w13題目作業:</p>
<p>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</p>
<p><img alt="" height="116" src="/images/螢幕擷取畫面 2024-12-10 193324.png" width="116"/></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mE_UIJSY8sw?si=kOYmevzmfRIYz4PV" title="YouTube video player" width="560"></iframe></p>
<p>此作業做法的大致步驟:</p>
<p><strong>1.引入模組與初始化畫布</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
</pre>
<p><strong>2. 設定繪圖上下文與線條寬度</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ctx = canvas.getContext("2d")
ctx.lineWidth = 1
</pre>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="sticky top-9 md:top-[5.75rem]">
<div class="absolute bottom-0 right-2 flex h-9 items-center">
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><strong><span class="" data-state="closed"><span class="" data-state="closed">3.繪製兩個正方形</span></span></strong>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 正方形1
ctx.rect(200, 200, 200, 200)  # 正方形2
ctx.stroke()
</pre>
<strong><span class="" data-state="closed">4.繪製對角線</span></strong></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點
ctx.lineTo(300, 300)  # 終點
ctx.stroke()
</pre>
<span class="" data-state="closed">5. <strong>繪製兩個圓形</strong></span></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 圓1
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 圓2
ctx.stroke()
</pre>
<span class="" data-state="closed"><strong>6.定義點與形狀的關係函數</strong></span></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><span class="" data-state="closed"><strong>(1)檢查點是否在圓內</strong>：</span></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def point_in_circle1(x, y):
    cx, cy, r = 200, 200, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2
</pre>
<span class="" data-state="closed">根據圓的公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>c</mi><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>&lt;</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(x - cx)^2 + (y - cy)^2 &lt; r^2</annotation></semantics></math></span><span aria-hidden="true" class="katex-html"><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose">)<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span><span class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mbin">+</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord mathnormal">y</span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">cy</span><span class="mclose">)<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span><span class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mrel">&lt;</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span><span class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 判斷點是否在圓1內。</span></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><span class="" data-state="closed"><strong>(2)檢查點是否在正方形內或外</strong>：</span></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def point_in_square1(x, y):
    return 100 &lt;= x &lt;= 300 and 100 &lt;= y &lt;= 300
</pre>
<p>其他類似函數對點的方位進行分類（如：點是否在直線上方、下方，點是否在正方形上下左右）。</p>
<p>7. <strong>取得點的屬性</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def get_region(x, y):
    regions = []
    if point_in_circle1(x, y):
        regions.append("circle1")
    if point_in_square1(x, y):
        regions.append("inside_square1")
    # ...省略其他條件...
    return regions
</pre>
<p>根據點的座標，判斷它位於哪些區域（例如：圓內、正方形內、正方形外、直線上）。</p>
<p>8. <strong>決定著色區域</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def get_region_color(x, y):
    regions = get_region(x, y)
    if "circle1" in regions and "circle2" in regions:
        return "purple"
    if "circle1" in regions and "inside_square1" in regions:
        if point_above_line(x, y):
            return "green"
    # ...其他條件...
    return None
</pre>
<p>根據區域屬性決定著色的顏色，例如：</p>
<ul>
<li>在兩個圓內：紫色。</li>
<li>圓內且正方形內：綠色或黃色（根據直線上下）。</li>
<li>其他條件決定不同顏色。</li>
</ul>
9. <strong>掃描畫布並著色</strong></div>
<div class="overflow-y-auto p-4" dir="ltr">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def scan_and_draw():
    for y in range(0, canvas.height, 1):  # 每像素掃描
        for x in range(0, canvas.width, 1):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.beginPath()
                ctx.arc(x + 1, y + 1, 1, 0, 2 * 3.14)  # 用小點標示
                ctx.fill()
</pre>
</div>
</div>
<p>10. <strong>執行掃描與繪製</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">scan_and_draw()
</pre>
<p></p><h3>w13_ai</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Aj-t76HfqnA?si=10_6_SuQrMW5XY-e" title="YouTube video player" width="560"></iframe></p>
<p><a href="/get_page/w13_ai/from browser import html, document as doc, window  # 建立 canvas 元素 canvas = html.CANVAS(width=500, height=500)  # 增加畫布大小以確保圓形完全可見 brython_div = doc[&quot;brython_div1&quot;] brython_div &lt;= canvas  # 取得 canvas 的繪圖上下文 ctx = canvas.getContext(&quot;2d&quot;)  # 在 (50, 50) 畫出第一個正方形 width = 10 height = 10 gs = 20  # 網格大小（用於間隔）  ctx.lineWidth = 2 ctx.strokeStyle = 'red'  # 設定第一個正方形的顏色為紅色 ctx.beginPath() ctx.rect(50, 50, width * gs, height * gs)  # 畫出第一個正方形，左上角為 (50, 50) ctx.stroke()  # 在 (150, 150) 畫出第二個正方形 offset_x = 150  # 改變 x 座標，讓正方形有更多的間隔 offset_y = 150  # 改變 y 座標，讓正方形有更多的間隔 width2 = 10 height2 = 10  ctx.lineWidth = 2 ctx.strokeStyle = 'red'  # 設定第二個正方形的顏色為紅色 ctx.beginPath() ctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # 畫出第二個正方形 ctx.stroke()  # 畫圍繞正方形的外圓 def draw_outer_circle(x, y, width, height):     # 計算外圓的半徑（正方形的對角線的一半）     radius = window.Math.sqrt(width ** 2 + height ** 2) / 2     # 計算正方形的中心     center_x = x + width * gs / 2     center_y = y + height * gs / 2     # 畫出外圓     ctx.beginPath()     ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)     ctx.strokeStyle = 'black'  # 設定外圓的顏色為黑色     ctx.lineWidth = 2     ctx.stroke()  # 畫出兩個正方形的外圓 draw_outer_circle(50, 50, width, height)  # 第一個正方形的外圓 draw_outer_circle(offset_x, offset_y, width2, height2)  # 第二個正方形的外圓  # 畫出從 (0, 0) 到 (200, 200) 的藍色斜線 ctx.lineWidth = 2 ctx.strokeStyle = 'blue'  # 設定線條顏色為藍色 ctx.beginPath() ctx.moveTo(50 , 50)  # 起點 (50, 50) ctx.lineTo(250, 250)  # 終點 (250, 250) ctx.stroke()  # 繪製斜線  # 建立右鍵選單 context_menu = html.DIV(style={&quot;position&quot;: &quot;absolute&quot;, &quot;display&quot;: &quot;none&quot;, &quot;background-color&quot;: &quot;#fff&quot;, &quot;border&quot;: &quot;1px solid #ccc&quot;, &quot;padding&quot;: &quot;5px&quot;}) context_menu &lt;= html.BUTTON(&quot;選項 1: 清空畫布&quot;) context_menu &lt;= html.BUTTON(&quot;選項 2: 畫圓&quot;) brython_div &lt;= context_menu  # 顯示右鍵選單的函式 def show_context_menu(event):     event.preventDefault()  # 防止預設的右鍵選單顯示     context_menu.style.display = &quot;block&quot;  # 顯示自定義的右鍵選單     context_menu.style.left = f&quot;{event.pageX}px&quot;  # 設定選單的 x 座標     context_menu.style.top = f&quot;{event.pageY}px&quot;  # 設定選單的 y 座標  # 當點擊畫布以外的地方時隱藏選單 def hide_context_menu(event):     context_menu.style.display = &quot;none&quot;  # 給畫布綁定右鍵事件 canvas.bind(&quot;contextmenu&quot;, show_context_menu)  # 給文件綁定點擊事件，當點擊畫布以外的地方時隱藏選單 document.bind(&quot;click&quot;, hide_context_menu)  # 右鍵選單選項的函式 def clear_canvas(event):     ctx.clearRect(0, 0, canvas.width, canvas.height)  # 清空畫布     context_menu.style.display = &quot;none&quot;  # 清空後隱藏選單  def draw_circle(event):     ctx.beginPath()     ctx.arc(200, 200, 50, 0, 2 * window.Math.PI)  # 在中心畫圓     ctx.strokeStyle = 'green'     ctx.stroke()     context_menu.style.display = &quot;none&quot;  # 畫完圓後隱藏選單  # 給右鍵選單按鈕綁定行為 context_menu.children[0].bind(&quot;click&quot;, clear_canvas)  # 第一個按鈕：清空畫布 context_menu.children[1].bind(&quot;click&quot;, draw_circle)  # 第二個按鈕：畫圓">作業程式碼</a></p>
<p>此作業做法的大致步驟:</p>
<p><strong>1.引入模組與初始化畫布</strong></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_60618">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">html</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">document as doc</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="py comments"># 設置畫布</code></div>
<div class="line number5 index4 alt2"><code class="py plain">canvas </code><code class="py keyword">=</code> <code class="py plain">html.CANVAS(width</code><code class="py keyword">=</code><code class="py value">600</code><code class="py plain">, height</code><code class="py keyword">=</code><code class="py value">600</code><code class="py plain">)</code></div>
<div class="line number6 index5 alt1"><code class="py plain">brython_div </code><code class="py keyword">=</code> <code class="py plain">doc[</code><code class="py string">"brython_div1"</code><code class="py plain">]</code></div>
<div class="line number7 index6 alt2"><code class="py plain">brython_div &lt;</code><code class="py keyword">=</code> <code class="py plain">canvas</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><strong>2. 設定繪圖上下文與線條寬度</strong></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_730412">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">ctx </code><code class="py keyword">=</code> <code class="py plain">canvas.getContext(</code><code class="py string">"2d"</code><code class="py plain">)</code></div>
<div class="line number2 index1 alt1"><code class="py plain">ctx.lineWidth </code><code class="py keyword">=</code> <code class="py value">1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="sticky top-9 md:top-[5.75rem]">
<div class="absolute bottom-0 right-2 flex h-9 items-center">
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><strong><span class="" data-state="closed">3.繪製兩個正方形</span></strong>
<div>
<div class="syntaxhighlighter py" id="highlighter_707922">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">ctx.strokeStyle </code><code class="py keyword">=</code> <code class="py string">'red'</code></div>
<div class="line number2 index1 alt1"><code class="py plain">ctx.beginPath()</code></div>
<div class="line number3 index2 alt2"><code class="py plain">ctx.rect(</code><code class="py value">100</code><code class="py plain">, </code><code class="py value">100</code><code class="py plain">, </code><code class="py value">200</code><code class="py plain">, </code><code class="py value">200</code><code class="py plain">)  </code><code class="py comments"># 正方形1</code></div>
<div class="line number4 index3 alt1"><code class="py plain">ctx.rect(</code><code class="py value">200</code><code class="py plain">, </code><code class="py value">200</code><code class="py plain">, </code><code class="py value">200</code><code class="py plain">, </code><code class="py value">200</code><code class="py plain">)  </code><code class="py comments"># 正方形2</code></div>
<div class="line number5 index4 alt2"><code class="py plain">ctx.stroke()</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<strong><span class="" data-state="closed">4.繪製對角線</span></strong></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary">
<div>
<div class="syntaxhighlighter py" id="highlighter_940633">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">ctx.strokeStyle </code><code class="py keyword">=</code> <code class="py string">'blue'</code></div>
<div class="line number2 index1 alt1"><code class="py plain">ctx.beginPath()</code></div>
<div class="line number3 index2 alt2"><code class="py plain">ctx.moveTo(</code><code class="py value">100</code><code class="py plain">, </code><code class="py value">100</code><code class="py plain">)  </code><code class="py comments"># 起點</code></div>
<div class="line number4 index3 alt1"><code class="py plain">ctx.lineTo(</code><code class="py value">300</code><code class="py plain">, </code><code class="py value">300</code><code class="py plain">)  </code><code class="py comments"># 終點</code></div>
<div class="line number5 index4 alt2"><code class="py plain">ctx.stroke()</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<span class="" data-state="closed">5.<span> </span><strong>繪製兩個圓形</strong></span></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary">
<div>
<div class="syntaxhighlighter py" id="highlighter_689765">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">ctx.strokeStyle </code><code class="py keyword">=</code> <code class="py string">'black'</code></div>
<div class="line number2 index1 alt1"><code class="py plain">ctx.beginPath()</code></div>
<div class="line number3 index2 alt2"><code class="py plain">ctx.arc(</code><code class="py value">200</code><code class="py plain">, </code><code class="py value">200</code><code class="py plain">, </code><code class="py value">141.4</code><code class="py plain">, </code><code class="py value">0</code><code class="py plain">, </code><code class="py value">2</code> <code class="py keyword">*</code> <code class="py value">3.14</code><code class="py plain">)  </code><code class="py comments"># 圓1</code></div>
<div class="line number4 index3 alt1"><code class="py plain">ctx.stroke()</code></div>
<div class="line number5 index4 alt2"><code class="py plain">ctx.beginPath()</code></div>
<div class="line number6 index5 alt1"><code class="py plain">ctx.arc(</code><code class="py value">300</code><code class="py plain">, </code><code class="py value">300</code><code class="py plain">, </code><code class="py value">141.4</code><code class="py plain">, </code><code class="py value">0</code><code class="py plain">, </code><code class="py value">2</code> <code class="py keyword">*</code> <code class="py value">3.14</code><code class="py plain">)  </code><code class="py comments"># 圓2</code></div>
<div class="line number7 index6 alt2"><code class="py plain">ctx.stroke()</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div><h3>w14_ex</h3>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/a9d887546e024d52d16c228a6657146580342746/two_cicle_section_fill_ex.py">參考範例</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/7a086162a04783664bf64d9abd49da059634a0b4/multiple_circle_interaction_fill.py">多個圓相交區域著色範例</a></p>
<p>以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math
 
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
     
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
     
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx
 
# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串
 
# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² &lt;= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2
 
# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2):
    """
    根據傳入的兩個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}
 
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
         
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
             
            if in_circle1 and in_circle2:
                # 如果點同時在兩個圓內，則是交集區域
                if "intersection" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection"] = random_color_generator()
                # 設置當前掃描線的顏色為交集區域的顏色
                current_color = color_dict["intersection"]
            elif in_circle1:
                # 如果點只在圓1內，則是圓1的區域
                if "circle1" not in color_dict:
                    # 如果還沒有為圓1分配顏色，則分配一個隨機顏色
                    color_dict["circle1"] = random_color_generator()
                # 設置當前掃描線的顏色為圓1區域的顏色
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內，則是圓2的區域
                if "circle2" not in color_dict:
                    # 如果還沒有為圓2分配顏色，則分配一個隨機顏色
                    color_dict["circle2"] = random_color_generator()
                # 設置當前掃描線的顏色為圓2區域的顏色
                current_color = color_dict["circle2"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
 
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
 
# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
 
# 呼叫畫圓函式，並繪製兩個圓
draw_circles(x1, y1, r1, x2, y2, r2)
</pre>
<p></p>
<p>我的作業程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random

# 定義初始化畫布函式
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 繪製三個圓
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    color_dict = {}

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            # 判斷點是否在三個圓內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

            # 根據區域分配顏色
            if in_circle1 and in_circle2 and in_circle3:
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                if "intersection_12" not in color_dict:
                    color_dict["intersection_12"] = random_color_generator()
                current_color = color_dict["intersection_12"]
            elif in_circle1 and in_circle3:
                if "intersection_13" not in color_dict:
                    color_dict["intersection_13"] = random_color_generator()
                current_color = color_dict["intersection_13"]
            elif in_circle2 and in_circle3:
                if "intersection_23" not in color_dict:
                    color_dict["intersection_23"] = random_color_generator()
                current_color = color_dict["intersection_23"]
            elif in_circle1:
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                current_color = "white"  # 背景色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

# 設定三個圓的圓心與半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 300, 100  # 圓3：圓心 (200, 300)，半徑 100

# 呼叫繪製函式
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p></p><h6>w15</h6><h3>w15</h3>
<p><span>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</span></p>
<p><span>程式碼</span></p>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h6>w15</h6><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w5</h3>
<p>Strings, input(), and print()</p>
<p>首先必須瞭解  Python 變數命名法則:</p>
<p>必須以英文字母或 _ 作為開頭, 隨後可以接上任何數字、英文字母或 _</p>
<p>但變數名稱區分英文字母的大小寫, 變數也可以使用中文命名, 但一般並不建議使用英文以外的多 byte 語系命名.</p>
<p>String 為字串, 可以用單引號、雙引號或三引號隔開. 例如:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_314717">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py string">"this is a string's "</code> <code class="py plain">使用雙引號將字串區隔</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="py string">'this is a string'</code> <code class="py plain">使用單引號將字串區隔</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="py plain">當字串超過一行時, 可以使用三引號:</code></div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="py comments">'''</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="py comments">這裡面是用來說明程式目的或紀錄</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="py comments">相關事項的多行文字</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="py comments">'''</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>print 與 for 重複迴圈</p>
<p>help(print)</p>
<p>help(range)</p>
<p>與 ChatGPT 對話:</p>
<p>可以解釋一下help(range) 傳回來的內容嗎?</p>
<p>將 help(range) 傳回的內容貼給 ChatGPT, 然後問:</p>
<p>可以舉例詳細說明以下 help(range) 傳回來的內容嗎? 然後貼上 help 傳回的資料.</p>
<p>詢問 for i in range():</p>
<p>如何解釋 Python 中的 for i in range(5):</p>
<p>如何解釋 range(5) ?</p>
<p>range(5) 是數列嗎?</p>
<p>能夠生成從 0 到 4 的整數序列, 所以可以稱 range(5) 為甚麼?</p>
<p data-pm-slice="0 0 []">請舉 10 個可以協助使用者理解 for range 與 print 等關鍵字的範例</p>
<p data-pm-slice="0 0 []">請用 Python 的 for 跟 print 印出五行的 * 排列成的三角形金字塔, 也就是 * 在最中間, 第二行為正中央的 *** 然後第三行 *****, 總共五行<img alt="" height="253" src="/images/螢幕擷取畫面 2024-11-12 172550.png" width="499"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 設定總行數
rows = 5

for i in range(rows):
    # 每行的空格數量
    spaces = ' ' * (rows - i - 1)
    # 每行的星號數量
    stars = '*' * (2 * i + 1)
    # 輸出該行
    print(spaces + stars)
</pre>
<p data-pm-slice="0 0 []"><img alt="" height="194" src="/images/螢幕擷取畫面 2024-11-12 172808.png" width="442"/></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"></p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>